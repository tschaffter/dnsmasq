name: Update Dnsmasq release

on:
  schedule:
    - cron: '0 0 * * 0'  # At 00:00 every Sunday
  pull_request:

jobs:
  check-and-update:
    name: Check and update Dnsmasq release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get latest Dnsmasq release version
        run: |
          git clone git://thekelleys.org.uk/dnsmasq.git
          cd dnsmasq
          dnsmasq_version=$(git describe --tags --abbrev=0)
          dnsmasq_version=${dnsmasq_version:1}  # remove the prefix 'v'
          stable_release=true
          case $dnsmasq_version in
            *rc*|*test*)
              stable_release=false
              ;;
          esac
          echo "DNSMASQ_VERSION=$(echo $dnsmasq_version)" >> $GITHUB_ENV
          echo "STABLE_RELEASE=$(echo $stable_release)" >> $GITHUB_ENV

      - name: Update Docker image version
        if: env.STABLE_RELEASE == 'true'
        run: |
          current_version=$(cat VERSION)
          new_version=${{ env.DNSMASQ_VERSION }}
          echo "Current version: $current_version"
          echo "New version: $new_version"

      # - name: Update stack version
      #   run: |
      #     source .env
      #     cur_ver="$ELK_VERSION"
      #     new_ver=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}

      #     # Escape dot characters so sed interprets them as literal dots
      #     cur_ver="$(echo $cur_ver | sed 's/\./\\./g')"
      #     # Trim leading 'v' in semantic version
      #     new_ver="${new_ver:1}"

      #     for f in .env docker-stack.yml README.md; do
      #       sed -i "s/${cur_ver}/${new_ver}/g" "$f"
      #     done

      # - name: Send pull request to update to new version
      #   uses: peter-evans/create-pull-request@v3
      #   with:
      #     commit-message: Update to ${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}
      #     title: Update to ${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}
      #     delete-branch: true
